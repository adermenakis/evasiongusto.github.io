#!/usr/bin/env node
const sharp=require("sharp"),fs=require("fs").promises,path=require("path"),IMAGE_DIRS=["./images/gallery","./images/services"],LQIP_WIDTH=20,LQIP_QUALITY=20;async function generateLQIP(e){try{const o=path.extname(e).toLowerCase();if(![".jpg",".jpeg",".png",".webp"].includes(o))return null;console.log(`Processing: ${e}`);const r=await sharp(e).resize(20,null,{fit:"inside",withoutEnlargement:!0}).blur(2).jpeg({quality:20}).toBuffer();return{original:e,lqip:`data:image/jpeg;base64,${r.toString("base64")}`,size:r.length}}catch(o){return console.error(`Error processing ${e}:`,o.message),null}}async function processDirectory(e){const o=[];try{const r=await fs.readdir(e);for(const s of r){const r=path.join(e,s);if((await fs.stat(r)).isFile()){const e=await generateLQIP(r);e&&o.push(e)}}}catch(o){console.error(`Error reading directory ${e}:`,o.message)}return o}async function main(){console.log("🖼️  Generating Low-Quality Image Placeholders...\n");const e=[];for(const o of IMAGE_DIRS){console.log(`\n📁 Processing directory: ${o}`);const r=await processDirectory(o);e.push(...r)}const o="./lqip-data.json";await fs.writeFile(o,JSON.stringify(e,null,2),"utf8"),console.log(`\n✅ Generated ${e.length} LQIPs`),console.log(`📄 Saved to: ${o}`);const r=e.reduce((e,o)=>e+o.size,0);console.log(`💾 Total LQIP size: ${(r/1024).toFixed(2)} KB`)}main().catch(console.error);